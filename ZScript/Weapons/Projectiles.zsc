// Buster shots and puffs
class BusterPuffBase : Actor
{
	Default
	{
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+PUFFONACTORS
	}
	States
	{
		Spawn:
			PUFF ABCD 4 Bright;
			Stop;
	}
}

class NullPuff : Actor	// needs to exist to not default to BulletPuff from Doom, thanks to Agent_Ash
{
	Default
	{
		+NODECAL
		+NOINTERACTION
		+BLOODLESSIMPACT
		+PAINLESS
		+PUFFONACTORS
		+NODAMAGETHRUST
	}
	States
	{
		Spawn:
			TNT1 A 1;
			Stop;
	}
}

class UnchargedBusterPuff : BusterPuffBase
{
	States
	{
		Spawn:
			BNP0 ABCD 1 Bright;
			Stop;
	}
}

class MidChargeBusterPuff : BusterPuffBase
{
	States
	{
		Spawn:
			BNP1 AB 1 Bright;
			BNP1 CDEFG 2 Bright;
			Stop;
	}
}

class MaxChargeBusterPuff : BusterPuffBase
{
	States
	{
		Spawn:
			BNP2 AB 1 Bright;
			BNP2 CDEFG 2 Bright;
			Stop;
	}
}

class UnchargedBusterTracer : FastProjectile
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_FaceMovementDirection();
	}
	Default
	{
		Projectile;
		+RANDOMIZE
		+FORCEXYBILLBOARD
		+DONTSPLASH
		//+BLOODSPLATTER 
		+NOEXTREMEDEATH
		DamageFunction 1;
		Radius 2;
		Height 2;
		Speed 140;
		RenderStyle "Translucent";
		Alpha 0.75;
		Scale .15;
		Obituary "%o was tickled to death by %k's uncharged buster shot.";
		DeathSound "weapons/hit";
	}
	States
	{
		Spawn:
			BNTR A 1 Bright {LineAttack(angle, PLAYERMISSILERANGE, pitch, 0, 'Normal', "NullPuff", LAF_TARGETISSOURCE);}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("UnchargedBusterPuff");
			Stop;
	}
}

class MidChargeBusterTracer : UnchargedBusterTracer
{
	Default
	{
		Scale .30;
		DamageFunction 5;
		Radius 4;
		Height 4;
		Obituary "%o was sniped by %k's half-charged buster shot.";
	}
	States
	{
		Spawn:
			BNTR B 1 Bright {LineAttack(angle, PLAYERMISSILERANGE, pitch, 0, 'Normal', "NullPuff", LAF_TARGETISSOURCE);}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("MidChargeBusterPuff");
			Stop;
	}
}

class MaxChargeBusterTracer : UnchargedBusterTracer
{
	Default
	{
		Scale .45;
		DamageFunction 10;
		Radius 8;
		Height 8;
		Obituary "%o was blasted by %k's fully-charged buster shot.";
	}
	States
	{
		Spawn:
			BNTR C 1 Bright {LineAttack(angle, PLAYERMISSILERANGE, pitch, 0, 'Normal', "NullPuff", LAF_TARGETISSOURCE);}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("MaxChargeBusterPuff");
			Stop;
	}
}

class UnchargedBusterTracerSH : UnchargedBusterTracer
{
	Default
	{
		DeathSound "weapons/shanghit";
	}
	States
	{
		Spawn:
			BNTR D 1 Bright {LineAttack(angle, PLAYERMISSILERANGE, pitch, 0, 'Normal', "NullPuff", LAF_TARGETISSOURCE);}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("UnchargedBusterPuffSH");
			Stop;
	}
}

class MaxChargeBusterTracerSH : MidChargeBusterTracer
{
	Default
	{
		Obituary "%o was sniped by %k's fully-charged buster shot.";
		DeathSound "weapons/shanghit";
	}
	States
	{
		Spawn:
			BNTR E 1 Bright {LineAttack(angle, PLAYERMISSILERANGE, pitch, 0, 'Normal', "NullPuff", LAF_TARGETISSOURCE);}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("MaxChargeBusterPuffSH");
			Stop;
	}
}

class UnchargedBusterPuffSH : BusterPuffBase
{
	States
	{
		Spawn:
			BNP3 ABCD 1 Bright;
			Stop;
	}
}

class MaxChargeBusterPuffSH : BusterPuffBase
{
	States
	{
		Spawn:
			BNP4 AB 1 Bright;
			BNP4 CDEF 2 Bright;
			Stop;
	}
}

class BlitzBusterShot1 : UnchargedBusterTracerSH
{
	Default
	{
		Speed 70;
	}
	States
	{
		Spawn:
			BNTR F 1 Bright {LineAttack(angle, PLAYERMISSILERANGE, pitch, 0, 'Normal', "NullPuff", LAF_TARGETISSOURCE);}
			Loop;
	}
}

// Elemental puffs
class ElecPuff : BusterPuffBase
{
	States
	{
		Spawn:
			BNP5 KLM 2 Bright;
			BNP5 NOP 3 Bright;
			Stop;
	}
}

class DeathTimer : Inventory {Default {Inventory.MaxAmount 300;}}

// Generic projectile templates
class ElecProjectile : Actor
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_FaceMovementDirection();
	}
	actor victim;
	Default
	{
		Projectile;
		DamageType "Electric";
		DeathSound "weapons/hit";
	}
	override int SpecialMissileHit(actor victim) // An actor it hits is labelled "victim".
	{
		if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
		if (victim.health <= Damage)
			{
				victim.A_Spawnitemex("ElectricDamageEffect",0,0,20,0,0,0,0,SXF_SETMASTER);
				victim.A_Die("electric");
				return 1;
			}
		victim.A_Spawnitemex("ElectricDamageEffect",0,0,20,0,0,0,0,SXF_SETMASTER);
		}
		return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
	}
	States
	{
		Death:
			TNT1 A 0 A_SpawnItemEx("ElecPuff");
			Stop;
	}
}

class HelzRolling : Actor
{
	actor victim;
	array<actor> hitList;

	override int SpecialMissileHit(actor victim)
	{
		if (hitList.Find(victim) == hitList.Size() && !self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			victim.DamageMobj(self,target,160,"MOD_CHAINSAW");
			A_StartSound("weapons/hit");
			hitlist.Push(victim);
		}
		return 1;
	}
	Default
	{
		Projectile;
		-NOGRAVITY
		+RANDOMIZE
		+DONTSPLASH
		+NOEXPLODEFLOOR
		+STEPMISSILE
		+RIPPER
		+SCREENSEEKER
		DamageFunction (0);	// Damage is handled by SpecialMissileHit, so it can pierce without doing RIPPER damage.
		Radius 4;
		Height 24;
		Speed 45;
		Obituary "%o was sliced in half by %k's Helz Rolling.";
		SeeSound "weapons/helzrolling";
		DeathSound "weapons/hit";
	}
	States
	{
		Spawn:
			TNT1 A 0 A_JumpIfInventory("DeathTimer", 90, "Dissipate");
			HELZ AAABBBCCC 1 {
				A_GiveInventory("DeathTimer", 1);
				A_SeekerMissile(0, 15, SMF_LOOK|SMF_PRECISE|SMF_CURSPEED);
			}
			Loop;
		Dissipate:
			HELZ DE 3;
			Stop;
		Death:
			TNT1 A 0 A_SpawnItemEx("MaxChargeBusterPuff");
			Stop;
	}
}