extend class BusterBase {
	States {
		Chip.Sword:
			TNT1 A 0 {
				A_FireProjectile("SwordSlash");	// Now it's a projectile, so it can be a small AoE thing.
				player.SetPSprite(-3, ResolveState("SwordBlade"));
				A_OverlayTranslation(-3, "Sword");
				player.SetPSprite(OverlayID(), ResolveState("SwordSwing"));
			}
		Chip.WideSwrd:
			TNT1 A 0 {
				A_FireProjectile("WideSwrdSlash");	// Now it's a projectile, so it can be a small AoE thing.
				A_FireProjectile("WideSwrdHitbox", spawnofs_xy: -32);
				A_FireProjectile("WideSwrdHitbox", spawnofs_xy: 32);
				player.SetPSprite(-3, ResolveState("SwordBlade"));
				A_OverlayTranslation(-3, "Sword");
				player.SetPSprite(OverlayID(), ResolveState("SwordSwing"));
			}
		Chip.LongSwrd:
			TNT1 A 0 {
				A_FireProjectile("LongSwrdSlash");	// Now it's a projectile, so it can be a small AoE thing.
				player.SetPSprite(-3, ResolveState("SwordBlade"));
				A_OverlayTranslation(-3, "Sword");
				player.SetPSprite(OverlayID(), ResolveState("SwordSwing"));
			}

		Chip.StepSwrd:
			TNT1 A 0 {
				// Right arm
				player.SetPSprite(-3, ResolveState("StepSwrdBlade"));
				A_OverlayTranslation(-3, "Sword");
				player.SetPSprite(OverlayID(), ResolveState("StepSwrdSwing"));
			}

		StepSwrdBlade:
			SWSL A 6 Bright;
			TNT1 A 0 {
				A_FireProjectile("WideSwrdSlash");	// Now it's a projectile, so it can be a small AoE thing.
				A_FireProjectile("WideSwrdHitbox", spawnofs_xy: -32);
				A_FireProjectile("WideSwrdHitbox", spawnofs_xy: 32);
			}
		SwordBlade:
			SWSL AB 2 Bright;
			SWSL CDEE 2 Bright;
			Stop;

		StepSwrdSwing:
			TNT1 A 0 {
				A_Overlay(5,"ChargeSoundFunction"); //Starts charge sound.
				A_Overlay(-1, "ChargeEffectFunction"); // starts charge effect
			}
			NSRD AAA 2 ThrustThing(angle * 256 / 360, 30, 1, 0);
			TNT1 A 0 A_Stop;
		SwordSwing:	// He-hey, now I can use this for a generic arm type.
			TNT1 A 0 {
				A_Overlay(5,"ChargeSoundFunction"); //Starts charge sound.
				A_Overlay(-1, "ChargeEffectFunction"); // starts charge effect
			}
			NSRD ABCDEE 2;
			TNT1 A 0 { return ResolveState("Select"); }
		SwordSwingLeft:	// Mostly for StepCros.
			NSRD ABCDEE 2;
			Stop;
	}
}

class SwordSlash : Actor
{
	actor victim;
	array<actor> hitList;

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_FaceMovementDirection();
	}
	override int SpecialMissileHit(actor victim)
	{
		if (hitList.Find(victim) == hitList.Size() && !self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			victim.DamageMobj(self,target,80,"MOD_CHAINSAW");
			self.A_Scream();
			hitlist.Push(victim);
		}
		return 1;
	}
	Default
	{
		Projectile;
		+RANDOMIZE
		+DONTSPLASH
		+RIPPER
		DamageFunction (0);	// Damage is handled by SpecialMissileHit, so it can pierce without doing RIPPER damage.
		Radius 32;
		Height 10;
		Speed 4;
		SeeSound "weapons/sword";
		Obituary "%o was sliced in half by %k's Sword.";
		DeathSound "weapons/hit";
	}
	States
	{
		Spawn:
			SLAS AAAABBBCC 1;
			Stop;
	}
}

class WideSwrdSlash : SwordSlash
{
	Default
	{
		Obituary "%o was diced by %k's WideSwrd.";
	}
	States
	{
		Spawn:
			SLAS DDDDEEEFF 1;
			Stop;
	}
}
class WideSwrdHitbox : SwordSlash
{
	Default
	{
		Obituary "%o was diced by %k's WideSwrd.";
	}
	States
	{
		Spawn:
			TNT1 A 9; // same time as the main slash
			Stop;
	}
}

class LongSwrdSlash : SwordSlash
{
	override int SpecialMissileHit(actor victim)
	{
		if (hitList.Find(victim) == hitList.Size() && !self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			victim.DamageMobj(self,target,100,"MOD_CHAINSAW");
			self.A_Scream();
			hitlist.Push(victim);
		}
		return 1;
	}
	Default
	{
		Speed 8;
		Obituary "%o was divided by %k's LongSwrd.";
	}
	States
	{
		Spawn:
			SLAS GGGGHHHII 1;
			Stop;
	}
}