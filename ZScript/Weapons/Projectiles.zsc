// Buster shots and puffs
class BusterPuffBase : Actor
{
	Default
	{
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+PUFFONACTORS
	}
	States
	{
		Spawn:
			PUFF ABCD 4 Bright;
			Stop;
	}
}

class UnchargedBusterPuff : BusterPuffBase
{
	States
	{
		Spawn:
			BNP0 ABCD 1 Bright;
			Stop;
	}
}

class MidChargeBusterPuff : BusterPuffBase
{
	States
	{
		Spawn:
			BNP1 AB 1 Bright;
			BNP1 CDEFG 2 Bright;
			Stop;
	}
}

class MaxChargeBusterPuff : BusterPuffBase
{
	States
	{
		Spawn:
			BNP2 AB 1 Bright;
			BNP2 CDEFG 2 Bright;
			Stop;
	}
}

class UnchargedBusterTracer : FastProjectile
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_FaceMovementDirection();
	}
	Default
	{
		Projectile;
		+RANDOMIZE
		+FORCEXYBILLBOARD
		+DONTSPLASH
		//+BLOODSPLATTER 
		+NOEXTREMEDEATH
		DamageFunction 1;
		Radius 2;
		Height 2;
		Speed 140;
		RenderStyle "Translucent";
		Alpha 0.75;
		Scale .15;
		Obituary "%o was tickled to death by %k's uncharged buster shot.";
		DeathSound "weapons/hit";
	}
	States
	{
		Spawn:
			BNTR A 1 Bright;
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("UnchargedBusterPuff");
			Stop;
	}
}

class MidChargeBusterTracer : UnchargedBusterTracer
{
	Default
	{
		Scale .30;
		DamageFunction 5;
		Radius 4;
		Height 4;
		Obituary "%o was sniped by %k's half-charged buster shot.";
	}
	States
	{
		Spawn:
			BNTR B 1 Bright;
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("MidChargeBusterPuff");
			Stop;
	}
}

class MaxChargeBusterTracer : UnchargedBusterTracer
{
	Default
	{
		Scale .45;
		DamageFunction 10;
		Radius 8;
		Height 8;
		Obituary "%o was blasted by %k's fully-charged buster shot.";
	}
	States
	{
		Spawn:
			BNTR C 1 Bright;
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("MaxChargeBusterPuff");
			Stop;
	}
}

class UnchargedBusterTracerSH : UnchargedBusterTracer
{
	Default
	{
		DeathSound "weapons/shanghit";
	}
	States
	{
		Spawn:
			BNTR D 1 Bright;
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("UnchargedBusterPuffSH");
			Stop;
	}
}

class MaxChargeBusterTracerSH : MaxChargeBusterTracer
{
	Default
	{
		DeathSound "weapons/shanghit";
	}
	States
	{
		Spawn:
			BNTR E 1 Bright;
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("MaxChargeBusterPuffSH");
			Stop;
	}
}

class UnchargedBusterPuffSH : BusterPuffBase
{
	States
	{
		Spawn:
			BNP3 ABCD 1 Bright;
			Stop;
	}
}

class MaxChargeBusterPuffSH : BusterPuffBase
{
	States
	{
		Spawn:
			BNP4 AB 1 Bright;
			BNP4 CDEF 2 Bright;
			Stop;
	}
}

class BlitzBusterShot1 : UnchargedBusterTracerSH
{
	Default
	{
		Speed 70;
	}
	States
	{
		Spawn:
			BNTR F 1 Bright;
			Loop;
	}
}

// Elemental puffs
class ElecPuff : BusterPuffBase
{
	States
	{
		Spawn:
			BNP5 KLM 2 Bright;
			BNP5 NOP 3 Bright;
			Stop;
	}
}

class DeathTimer : Inventory {Default {Inventory.MaxAmount 300;}}

// Generic projectile templates
class ElecProjectile : Actor
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_FaceMovementDirection();
	}
	actor victim;
	Default
	{
		Projectile;
		DamageType "Electric";
		DeathSound "weapons/hit";
	}
	override int SpecialMissileHit(actor victim) // An actor it hits is labelled "victim".
	{
		if (!self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
		if (victim.health <= Damage)
			{
				victim.A_Spawnitemex("ElectricDamageEffect",0,0,20,0,0,0,0,SXF_SETMASTER);
				victim.A_Die("electric");
				return 1;
			}
		victim.A_Spawnitemex("ElectricDamageEffect",0,0,20,0,0,0,0,SXF_SETMASTER);
		}
		return -1; // 1 to keep going on, -1 to die the appropriate death (XDeath in this case, since ideally it hit a bleeding actor)
	}
	States
	{
		Death:
			TNT1 A 0 A_SpawnItemEx("ElecPuff");
			Stop;
	}
}

// Chip attacks
class ZapRing1 : ElecProjectile
{
	Default
	{
		+FORCEXYBILLBOARD
		Radius 8;
		Height 8;
		Speed 50;
		DamageFunction 20;
	}
	States
	{
		Spawn:
			BNZR A 4 Bright;
			TNT1 A 2;
			BNZR B 3 Bright;
			TNT1 A 2;
			BNZR CD 2 Bright;
			BNZR E 3 Bright;
			TNT1 A 2;
			Loop;
	}
}

class ZapRing2 : ZapRing1 {Default {DamageFunction 30;}}

class ZapRing3 : ZapRing1 {Default {DamageFunction 40;}}

class ThunderBall : ElecProjectile
{
	Default
	{
		+FORCEXYBILLBOARD
		Radius 8;
		Height 8;
		Speed 2;
		DamageFunction 40;
	}
	States
	{
		Spawn:
			TNT1 A 0 A_JumpIfInventory("DeathTimer", 300, "Dissipate");
			BNTH ABCDEFGH 2 Bright {
				A_GiveInventory("DeathTimer", 2);
				A_SeekerMissile(0, 45, SMF_LOOK|SMF_PRECISE);
			}
			Loop;
		Dissipate:
			BNTH ABCD 2 Bright;
			BNTH IJK 1 Bright;
			Stop;
	}
}

class ElChain1 : ElecProjectile
{
	action void A_ElChainSpawn ()
	{
		let trl = Spawn("ElChain1Trail", Vec3Offset(-Vel.x/2., -Vel.y/2., -Vel.z/2.));
		let trl2 = Spawn("ElChain1Trail", Vec3Offset(-Vel.x, -Vel.y, -Vel.z));
		trl.angle = angle;
		trl.pitch = pitch;
		trl2.angle = angle;
		trl2.pitch = pitch;
	}
	override int DoSpecialDamage (Actor victim, int damage, Name damagetype)
	{
		if (victim != NULL && target != NULL && !victim.bDontThrust)
		{
			Vector3 thrust = victim.Vec3To(target);
			victim.Vel += thrust.Unit() * (255. * 50 / max(victim.Mass, 1));
		}
		return damage;
	}
	Default
	{
		+FORCEXYBILLBOARD
		Speed 20;
		Height 14;
		Radius 10;
		DamageFunction 30;
		MaxStepHeight 4;
		SeeSound "weapons/chain";
	}
	States
	{
		Spawn:
			SHEC BBBBBBBBBB 1 Bright A_ElChainSpawn; // 10 tics
			SHEC B 0 Bright A_ChangeVelocity(-Vel.X,-Vel.Y,-Vel.Z, CVF_REPLACE); // go back
			SHEC BBBBBBBBBBB 1 Bright A_ElChainSpawn; // 11 tics, just to be safe
			Stop;
	}
}

class ElChain1Trail : LoreShot2
{
	States
	{
		Spawn:
			SHEC A 10;
			Stop;
	}
}

class ElChain2 : ElChain1
{
	action void A_ElChainSpawn ()
	{
		let trl = Spawn("ElChain2Trail", Vec3Offset(-Vel.x/2., -Vel.y/2., -Vel.z/2.));
		let trl2 = Spawn("ElChain2Trail", Vec3Offset(-Vel.x, -Vel.y, -Vel.z));
		trl.angle = angle;
		trl.pitch = pitch;
		trl2.angle = angle;
		trl2.pitch = pitch;
	}
	Default
	{
		DamageFunction 70;
	}
	States
	{
		Spawn:
			SHEC DDDDDDDDDD 1 Bright A_ElChainSpawn; // 10 tics
			SHEC D 0 Bright A_ChangeVelocity(-Vel.X,-Vel.Y,-Vel.Z, CVF_REPLACE); // go back
			SHEC DDDDDDDDDDD 1 Bright A_ElChainSpawn; // 11 tics, just to be safe
			Stop;
	}
}

class ElChain2Trail : ElChain1Trail
{
	States
	{
		Spawn:
			SHEC C 10;
			Stop;
	}
}

class ElChain3 : ElChain1
{
	action void A_ElChainSpawn ()
	{
		let trl = Spawn("ElChain3Trail", Vec3Offset(-Vel.x/2., -Vel.y/2., -Vel.z/2.));
		let trl2 = Spawn("ElChain3Trail", Vec3Offset(-Vel.x, -Vel.y, -Vel.z));
		trl.angle = angle;
		trl.pitch = pitch;
		trl2.angle = angle;
		trl2.pitch = pitch;
	}
	Default
	{
		DamageFunction 110;
	}
	States
	{
		Spawn:
			SHEC FFFFFFFFFF 1 Bright A_ElChainSpawn; // 10 tics
			SHEC F 0 Bright A_ChangeVelocity(-Vel.X,-Vel.Y,-Vel.Z, CVF_REPLACE); // go back
			SHEC FFFFFFFFFFF 1 Bright A_ElChainSpawn; // 11 tics, just to be safe
			Stop;
	}
}

class ElChain3Trail : ElChain1Trail
{
	States
	{
		Spawn:
			SHEC E 10;
			Stop;
	}
}

class SwordSlash : Actor
{
	actor victim;
	array<actor> hitList;

	override int SpecialMissileHit(actor victim)
	{
		if (hitList.Find(victim) == hitList.Size() && !self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			victim.DamageMobj(self,target,80,"MOD_CHAINSAW");
			self.A_Scream();
			hitlist.Push(victim);
		}
		return 1;
	}
	Default
	{
		Projectile;
		+RANDOMIZE
		+DONTSPLASH
		+RIPPER
		+FLATSPRITE
		DamageFunction (0);	// Damage is handled by SpecialMissileHit, so it can pierce without doing RIPPER damage.
		Radius 10;
		Height 4;
		Speed 0;
		Obituary "%o was sliced in half by %k's Sword.";
		DeathSound "weapons/hit";
	}
	States
	{
		Spawn:
			SLAS AAAABBBCCC 1;
			Stop;
	}
}

class HelzRolling : Actor
{
	actor victim;
	array<actor> hitList;

	override int SpecialMissileHit(actor victim)
	{
		if (hitList.Find(victim) == hitList.Size() && !self.victim && victim.bSHOOTABLE && victim != target && victim.bDORMANT == 0)
		{
			victim.DamageMobj(self,target,160,"MOD_CHAINSAW");
			A_StartSound("weapons/hit");
			hitlist.Push(victim);
		}
		return 1;
	}
	Default
	{
		Projectile;
		-NOGRAVITY
		+RANDOMIZE
		+DONTSPLASH
		+NOEXPLODEFLOOR
		+STEPMISSILE
		+RIPPER
		+SCREENSEEKER
		DamageFunction (0);	// Damage is handled by SpecialMissileHit, so it can pierce without doing RIPPER damage.
		Radius 4;
		Height 24;
		Speed 45;
		Obituary "%o was sliced in half by %k's Helz Rolling.";
		SeeSound "weapons/helzrolling";
		DeathSound "weapons/hit";
	}
	States
	{
		Spawn:
			TNT1 A 0 A_JumpIfInventory("DeathTimer", 90, "Dissipate");
			HELZ AAABBBCCC 1 {
				A_GiveInventory("DeathTimer", 1);
				A_SeekerMissile(0, 15, SMF_LOOK|SMF_PRECISE|SMF_CURSPEED);
			}
			Loop;
		Dissipate:
			HELZ DE 3;
			Stop;
		Death:
			TNT1 A 0 A_SpawnItemEx("MaxChargeBusterPuff");
			Stop;
	}
}

class Barrier : Actor
{
	override void Tick()
	{
		Super.Tick();
		if (master)
			SetOrigin(master.pos, true);
	}
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other && other.bMISSILE && other.target != master)
			return true;

		return false;
	}
	Default
	{
		+NOGRAVITY
		+DONTSPLASH
		+SHOOTABLE
		+SOLID
		+NOBLOOD
		+NOTIMEFREEZE
		+NEVERTARGET
		+DONTRIP
		+MASTERNOSEE
		+NOTRIGGER
		RenderStyle "Add";
		Alpha 0.5;
		Health 1;
		Radius 36;
		Height 48;
		SeeSound "weapons/barrier";
	}
	States
	{
		Spawn:
			TNT1 A 1;
			BARA A 3 Bright;
			TNT1 A 1;
			BARA B 3 Bright;
			TNT1 A 1;
			BARA C 3 Bright;
			TNT1 A 1;
			BARA D 3 Bright;
			Loop;
		Pain.Wind:
			Stop;
	}
}

class LifeAura : Barrier
{
	Default
	{
		Health 200;
	}
	States
	{
		Spawn:
			LFEA ABC 3 Bright A_ResetHealth;
			Loop;
	}
}

class AirShot1 : UnchargedBusterTracer
{
	Default
	{
		Scale 1;
		DamageFunction 20;
		DamageType "Wind";
		Obituary "%o was unable to handle the gentle breeze from %k's AirShot1.";
	}
	States
	{
		Spawn:
			BNTR A 1 Bright;
			Loop;
		Death:
			TNT1 A 1 A_RadiusThrust(5000, 8, 0);
			Stop;
	}
}

class AirShot2 : AirShot1
{
	Default
	{
		DamageFunction 30;
		Obituary "%o was unable to handle the breeze from %k's AirShot2.";
	}
}

class AirShot3 : AirShot1
{
	Default
	{
		DamageFunction 40;
		Obituary "%o was unable to handle the breeze from %k's AirShot2.";
	}
}